;; -*- scheme -*-
; object definitions ...
(define-object Input
  (in-module "Gsf")
  (parent "GObject")
  (c-name "GsfInput")
  (gtype-id "GSF_TYPE_INPUT")
)

(define-object Infile
  (in-module "Gsf")
  (parent "GsfInput")
  (c-name "GsfInfile")
  (gtype-id "GSF_TYPE_INFILE")
)

;; Enumerations and flags ...


;; From /home/jk/gnome2/libgsf/gsf/gsf-input.h

(define-method container
  (of-object "GsfInput")
  (c-name "gsf_input_container")
  (return-type "GsfInfile*")
)

(define-method dup
  (of-object "GsfInput")
  (c-name "gsf_input_dup")
  (return-type "GsfInput*")
  (parameters
    '("GError**" "err")
  )
)

(define-method size
  (of-object "GsfInput")
  (c-name "gsf_input_size")
  (return-type "ssize_t")
)

(define-method eof
  (of-object "GsfInput")
  (c-name "gsf_input_eof")
  (return-type "gboolean")
)

(define-method remaining
  (of-object "GsfInput")
  (c-name "gsf_input_remaining")
  (return-type "size_t")
)

(define-method tell
  (of-object "GsfInput")
  (c-name "gsf_input_tell")
  (return-type "size_t")
)

(define-method seek
  (of-object "GsfInput")
  (c-name "gsf_input_seek")
  (return-type "gboolean")
  (parameters
    '("off_t" "offset")
    '("GsfOff_t" "whence")
  )
)

(define-function gsf_input_error
  (c-name "gsf_input_error")
  (return-type "GQuark")
)



;; From /home/jk/gnome2/libgsf/gsf/gsf.h



;; From /home/jk/gnome2/libgsf/gsf/gsf-input-impl.h

(define-method set_name
  (of-object "GsfInput")
  (c-name "gsf_input_set_name")
  (return-type "gboolean")
  (parameters
    '("char-const*" "name")
  )
)

(define-method set_container
  (of-object "GsfInput")
  (c-name "gsf_input_set_container")
  (return-type "gboolean")
  (parameters
    '("GsfInfile*" "container")
  )
)

(define-method set_size
  (of-object "GsfInput")
  (c-name "gsf_input_set_size")
  (return-type "gboolean")
  (parameters
    '("size_t" "size")
  )
)



;; From /home/jk/gnome2/libgsf/gsf/gsf-infile.h

(define-method num_children
  (of-object "GsfInfile")
  (c-name "gsf_infile_num_children")
  (return-type "int")
)

(define-method child_by_index
  (of-object "GsfInfile")
  (c-name "gsf_infile_child_by_index")
  (return-type "GsfInput*")
  (parameters
    '("int" "i")
  )
)

(define-method child_by_name
  (of-object "GsfInfile")
  (c-name "gsf_infile_child_by_name")
  (return-type "GsfInput*")
  (parameters
    '("char-const*" "name")
  )
)

(define-method child_by_vname
  (of-object "GsfInfile")
  (c-name "gsf_infile_child_by_vname")
  (return-type "GsfInput*")
  (parameters
    '("char-const*" "name")
  )
  (varargs #t)
)



;; From /home/jk/gnome2/libgsf/gsf/gsf-infile-impl.h


;; Stuff which h2def.py didn't catch

;; From /home/jk/gnome2/libgsf/gsf/gsf-input.h

(define-method name
  (of-object "GsfInput")
  (c-name "gsf_input_name")
  (return-type "const-char*")
)

(define-method read
  (of-object "GsfInput")
  (c-name "gsf_input_read")
  (return-type "guint8-const*")
  (caller-owns-return true)
  (parameters
    '("size_t" "num_bytes")
    '("guint8*" "optional_buffer" (default null) (null-ok))
  )
)

;; gsf-input-stdio.[ch]

(define-object InputStdio
  (in-module "Gsf")
  (parent "GsfInput")
  (c-name "GsfInputStdio")
  (gtype-id "GSF_TYPE_INPUT_STDIO")
)

(define-function gsf_input_stdio_new
  (c-name "gsf_input_stdio_new")
  (is-constructor-of "GsfInputStdio")
  (return-type "GsfInput*")
  (parameters
    '("char-const*" "filename")
    '("GError**" "err")
  )
)

;; gsf-input-memory.[ch]

(define-object InputMemory
  (in-module "Gsf")
  (parent "GsfInput")
  (c-name "GsfInputMemory")
  (gtype-id "GSF_TYPE_INPUT_MEMORY")
)

(define-function gsf_input_memory_new
  (c-name "gsf_input_memory_new")
  (is-constructor-of "GsfInputMemory")
  (return-type "GsfInput*")
  (parameters
    '("guint8-const*" "buf")
    '("size_t" "length")
    '("gboolean" "needs_free")
  )
)

(define-function gsf_input_mmap_new
  (c-name "gsf_input_mmap_new")
  (return-type "GsfInput*")
  (parameters
    '("char-const*" "filename")
    '("GError**" "err")
  )
)

;; From /home/jk/gnome2/libgsf/gsf/gsf-input-textline.[ch]

(define-object InputTextline
  (in-module "Gsf")
  (parent "GsfInput")
  (c-name "GsfInputTextline")
  (gtype-id "GSF_TYPE_INPUT_TEXTLINE")
)

(define-function gsf_input_textline_new
  (c-name "gsf_input_textline_new")
  (is-constructor-of "GsfInputTextline")
  (return-type "GsfInputTextline*")
  (parameters
    '("GsfInput*" "source")
  )
)

(define-method ascii_gets
  (of-object "GsfInputTextline")
  (c-name "gsf_input_textline_ascii_gets")
  (return-type "unsigned-char*")
  (caller-owns-return true)
)

(define-method utf8_gets
  (of-object "GsfInputTextline")
  (c-name "gsf_input_textline_utf8_gets")
  (return-type "guint8*")
  (caller-owns-return true)
)

;; From /home/jk/gnome2/libgsf/gsf/gsf-input-gzip.[ch]

(define-object InputGZip
  (in-module "Gsf")
  (parent "GsfInput")
  (c-name "GsfInputGZip")
  (gtype-id "GSF_TYPE_INPUT_GZIP")
)

(define-function gsf_input_gzip_new
  (c-name "gsf_input_gzip_new")
  (is-constructor-of "GsfInputGZip")
  (return-type "GsfInputGZip*")
  (parameters
    '("GsfInput*" "source")
    '("GError**" "err")
  )
)

;; From /home/jk/gnome2/libgsf/gsf/gsf-infile.h
(define-method name_by_index
  (of-object "GsfInfile")
  (c-name "gsf_infile_name_by_index")
  (return-type "char-const*")
  (caller-owns-return true)
  (parameters
    '("int" "i")
  )
)

;; From /home/jk/gnome2/libgsf/gsf/gsf-infile-msole.[ch]
(define-object InfileMSOle
  (in-module "Gsf")
  (parent "GsfInfile")
  (c-name "GsfInfileMSOle")
  (gtype-id "GSF_TYPE_INFILE_MS_OLE")
)

(define-function gsf_infile_msole_new
  (c-name "gsf_infile_msole_new")
  (is-constructor-of "GsfInfileMSOle")
  (return-type "GsfInfile*")
  (parameters
    '("GsfInput*" "source")
    '("GError**" "err")
  )
)

;; From /home/jk/gnome2/libgsf/gsf/gsf-infile-msvba.[ch]
(define-object InfileMSVBA
  (in-module "Gsf")
  (parent "GsfInfile")
  (c-name "GsfInfileMSVBA")
  (gtype-id "GSF_TYPE_INFILE_MSVBA")
)

(define-function gsf_infile_msvba_new
  (c-name "gsf_infile_msvba_new")
  (is-constructor-of "GsfInfileMSVBA")
  (return-type "GsfInfile*")
  (parameters
    '("GsfInput*" "source")
    '("GError**" "err")
  )
)

;; From /home/jk/gnome2/libgsf/gsf/gsf-infile-zip.[ch]

(define-object InfileZip
  (in-module "Gsf")
  (parent "GsfInfile")
  (c-name "GsfInfileZip")
  (gtype-id "GSF_TYPE_INFILE_ZIP")
)

(define-function gsf_infile_zip_new
  (c-name "gsf_infile_zip_new")
  (is-constructor-of "GsfInfileZip")
  (return-type "GsfInfile*")
  (parameters
    '("GsfInput*" "source")
    '("GError**" "err")
  )
)
