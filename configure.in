AC_PREREQ(2.52)
AC_INIT(gsf/gsf.h)

dnl Set release number
dnl This is derived from "Versioning" chapter of info libtool documentation.
PACKAGE=libgsf
dnl     4a) Increment when removing or changing interfaces.
LIBGSF_MAJOR_VERSION=1
dnl     4a) 5) Increment when adding interfaces.
dnl     6) Set to zero when removing or changing interfaces.
LIBGSF_MINOR_VERSION=10
dnl     3) Increment when interfaces not changed at all,
dnl               only bug fixes or internal changes made.
dnl     4b) Set to zero when adding, removing or changing interfaces.
LIBGSF_MICRO_VERSION=0
dnl
dnl     Set this too
MAJOR_VERSION_PLUS_MINOR_VERSION=`expr $LIBGSF_MAJOR_VERSION + $LIBGSF_MINOR_VERSION`
dnl
VERSION=$LIBGSF_MAJOR_VERSION.$LIBGSF_MINOR_VERSION.$LIBGSF_MICRO_VERSION
dnl Version info for libraries = CURRENT:REVISION:AGE
VERSION_INFO=$MAJOR_VERSION_PLUS_MINOR_VERSION:$LIBGSF_MICRO_VERSION:$LIBGSF_MINOR_VERSION
AC_SUBST(VERSION_INFO)
AC_SUBST(LIBGSF_MAJOR_VERSION)
AC_SUBST(LIBGSF_MINOR_VERSION)
AC_SUBST(LIBGSF_MICRO_VERSION)

dnl Start automake
AM_CONFIG_HEADER(gsf-config.h)
AM_INIT_AUTOMAKE($PACKAGE, $VERSION)
AM_MAINTAINER_MODE

dnl Checks for programs.
AC_PROG_CC
AC_PROG_MAKE_SET
AC_LIBTOOL_WIN32_DLL
AM_PROG_LIBTOOL

AC_SYS_LARGEFILE
AC_PATH_PROG(PKG_CONFIG, pkg-config, no)

dnl Checks for libraries.
PKG_CHECK_MODULES(LIBGSF,[
gobject-2.0 >= 2.0.0
glib-2.0 >= 2.0.0
libxml-2.0 >= 2.4.16
])

## this should come after `AC_PROG_CC'
ifdef([GNOME_COMPILE_WARNINGS],[GNOME_COMPILE_WARNINGS],)
CFLAGS="$CFLAGS $WARN_CFLAGS -DG_DISABLE_DEPRECATED"
if test "$GCC" = "yes"; then
	for option in -Wno-system-headers -Wfloat-equal -Wpointer-arith -Wbad-function-cast -Wwrite-strings -Wsign-compare -Waggregate-return -Wstrict-prototypes -Wmissing-prototypes -Wmissing-declarations -Wformat -Wnested-externs -Winline; do
		SAVE_CFLAGS="$CFLAGS"
		CFLAGS="$CFLAGS $option"
		AC_MSG_CHECKING([whether gcc understands $option])
		AC_TRY_COMPILE([], [],
			has_option=yes,
			has_option=no,)
		if test $has_option = no; then
		  CFLAGS="$SAVE_CFLAGS"
		fi
		AC_MSG_RESULT($has_option)
		unset has_option
		unset SAVE_CFLAGS
	done
	unset option
fi

AC_CHECK_DECL(fdopen, fdopen_works=yes, fdopen_works=no)
if test $fdopen_works = no ; then
	unset ac_cv_have_decl_fdopen
	CFLAGS="$CFLAGS -D_POSIX_SOURCE"
	AC_MSG_NOTICE([adding -D_POSIX_SOURCE to CFLAGS])
	AC_CHECK_DECL(fdopen, fdopen_works=yes, fdopen_works=no)
	if test $fdopen_works = no ; then
		AC_MSG_ERROR([fdopen is not available])
	fi
fi

# Unfortunately, -D_POSIX_SOURCE turns off struct timeval on Solaris
AC_MSG_CHECKING([whether struct timeval is available])
AC_TRY_COMPILE([#include <sys/time.h>], [struct timeval tv;], struct_timeval_works=yes, struct_timeval_works=no)
AC_MSG_RESULT($struct_timeval_works)

if test $struct_timeval_works = no ; then
	CFLAGS="$CFLAGS -D__EXTENSIONS__"
	AC_MSG_CHECKING([whether struct timeval is available with -D__EXTENSIONS__])
	AC_TRY_COMPILE([#include <sys/time.h>], [struct timeval tv;], struct_timeval_works=yes, struct_timeval_works=no)
	AC_MSG_RESULT($struct_timeval_works)
	if test $struct_timeval_works = no ; then
		AC_MSG_ERROR([struct timeval is not available])
	fi
fi

AC_MSG_CHECKING([whether -D_BSD_SOURCE is needed for caddr_t])
AC_TRY_COMPILE([#include <sys/types.h>], [caddr_t ca], need_bsd1=no, need_bsd1=yes)
AC_MSG_RESULT($need_bsd1)

AC_MSG_CHECKING([whether -D_BSD_SOURCE is needed for lstat])
AC_TRY_LINK([#include <sys/types.h>
	     #include <sys/stat.h>
	     #include <unistd.h>
	    ], [void *ptr = &lstat], need_bsd2=no, need_bsd2=yes)
AC_MSG_RESULT($need_bsd2)
if test $need_bsd1 = yes -o $need_bsd2 = yes; then
	CFLAGS="$CFLAGS -D_BSD_SOURCE"
fi

AC_CHECK_HEADERS(fcntl.h malloc.h unistd.h io.h)
AC_FUNC_MMAP

AC_CHECK_FUNCS(lstat readlink)

AC_MSG_CHECKING([for native Win32])
case "$host" in
  *-*-mingw*)
    native_win32=yes
    ;;
  *)
    native_win32=no
    ;;
esac
AC_MSG_RESULT([$native_win32])
AM_CONDITIONAL(OS_WIN32, test "$native_win32" = yes)

AC_MSG_CHECKING([for Win32 platform in general])
case "$host" in
  *-*-mingw*|*-*-cygwin*)
    platform_win32=yes
    ;;
  *)
    platform_win32=no
    ;;
esac
AC_MSG_RESULT($platform_win32)
AM_CONDITIONAL(PLATFORM_WIN32, test "$platform_win32" = yes)

##################################################
# Checks for gtk-doc and docbook-tools
##################################################
GTK_DOC_CHECK([1.0])

dnl ***********************************************************************************
dnl libxml
dnl
AC_CHECK_LIB(z, zlibVersion,
    [Z_LIBS=-lz AC_SUBST(Z_LIBS)],
    AC_MSG_ERROR([*** zlib is required]))

dnl ***********************************************************************************
dnl
dnl Uncomment to enable Python bindings. automake1.5 or later is required.
dnl
dnl AM_PATH_PYTHON
dnl AM_CHECK_PYTHON_HEADERS(,[AC_MSG_ERROR(could not find Python headers)])
dnl check for pygtk
dnl PKG_CHECK_MODULES(PYGTK, pygtk-2.0 >= 1.99.10,
dnl 		  [pygtk_msg="yes"],
dnl 		  [pygtk_msg="NO.  pygtk problem"])
dnl AC_SUBST(PYGTK_CFLAGS)
dnl AC_PATH_PROG(PYGTK_CODEGEN, pygtk-codegen-2.0, no)
dnl if test "x$PYGTK_CODEGEN" = xno; then
dnl    AC_MSG_ERROR(could not find pygtk-codegen-2.0 script)
dnl fi

dnl if test "x$pygtk_msg" = "xyes"; then
dnl   AM_CONDITIONAL(WITH_PYTHON, true)
dnl else
  AM_CONDITIONAL(WITH_PYTHON, false)
dnl fi

dnl ***********************************************************************************

dnl bz2
dnl
BZ2_LIBS=
test_bz2=true
AC_ARG_WITH(bz2,
	[--{with,without}-bz2   Build additional wrappers for BZ2],
	if test "x$withval" = xno; then
		test_bz2=false
	fi
)

with_bz2=false
if test "x$test_bz2" = xtrue ; then
   AC_CHECK_LIB(bz2, BZ2_bzDecompressInit, 
		bz2_ok=yes,
		bz2_ok=no
		AC_MSG_WARN(*** BZ2 support disabled (BZ2 library not found) ***))

   if test "$bz2_ok" = yes; then
      AC_MSG_CHECKING([for bzlib.h])
      AC_TRY_CPP(
	[#include <stdio.h>
	#undef PACKAGE
	#undef VERSION
	#undef HAVE_STDLIB_H
	#include <bzlib.h>],
        bz2_ok=yes,
        bz2_ok=no)
      AC_MSG_RESULT($bz2_ok)
   fi

   if test "$bz2_ok" = yes; then
	AC_DEFINE(HAVE_BZ2, 1, [Is bzip2 available and enabled])
	BZ2_LIBS="-lbz2"
   else
	AC_MSG_WARN(*** BZ2 support disabled (BZ2 header not found) ***)
   fi
else
   AC_MSG_WARN([BZ2 support disabled, as requested (Use --with-bz2 to enable)])
fi

AC_SUBST(BZ2_LIBS)

dnl ***********************************************************************************

dnl gnome
dnl
test_gnome=true
AC_ARG_WITH(gnome,
	[--{with,without}-gnome   Build additional wrappers for GNOME-VFS and BONOBO],
	if test "x$withval" = xno; then
		test_gnome=false
	fi
)
with_gnome=false
if  test "x$test_gnome" = xtrue ; then 
    PKG_CHECK_MODULES(LIBGSF_GNOME,[
    libbonobo-2.0 >= 2.0.0
    gnome-vfs-2.0 >= 1.9.16
    gnome-vfs-module-2.0 >= 1.9.16
    ],[with_gnome=true], [AC_MSG_WARN([GNOME support disabled, unable to find required version of VFS and/or Bonobo])])
else
    AC_MSG_WARN([GNOME support disabled, as requested (Use --with-gnome to enable)])
fi

AC_SUBST(LIBGSF_GNOME_CFLAGS)
AC_SUBST(LIBGSF_GNOME_LIBS)
AM_CONDITIONAL(WITH_LIBGSF_GNOME, $with_gnome)

AC_SUBST(LIBGSF_CFLAGS)
AC_SUBST(LIBGSF_LIBS)

AC_OUTPUT([
Makefile
doc/Makefile
gsf/Makefile
gsf-gnome/Makefile
gsf-win32/Makefile
tests/Makefile
python/Makefile
gsf/version.c
libgsf-1.pc
libgsf-1.spec
libgsf-gnome-1.pc
libgsf-gnome-1.spec
libgsf-win32-1.pc
libgsf-zip
doc/version.xml
])

AC_MSG_RESULT([Configured $PACKAGE $VERSION])

rm -f po/po2tbl.sed
