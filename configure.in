AC_PREREQ(2.52)
AC_INIT(gsf/gsf.h)

dnl Set release number
dnl This is derived from "Versioning" chapter of info libtool documentation.
PACKAGE=libgsf
dnl     4a) Increment when removing or changing interfaces.
LIBGSF_MAJOR_VERSION=1
dnl     4a) 5) Increment when adding interfaces.
dnl     6) Set to zero when removing or changing interfaces.
LIBGSF_MINOR_VERSION=6
dnl     3) Increment when interfaces not changed at all,
dnl               only bug fixes or internal changes made.
dnl     4b) Set to zero when adding, removing or changing interfaces.
LIBGSF_MICRO_VERSION=0
dnl
dnl     Set this too (I don't know how to do it automatically =) ):
MAJOR_VERSION_PLUS_MINOR_VERSION=7
dnl
VERSION=$LIBGSF_MAJOR_VERSION.$LIBGSF_MINOR_VERSION.$LIBGSF_MICRO_VERSION
dnl Version info for libraries = CURRENT:REVISION:AGE
VERSION_INFO=$MAJOR_VERSION_PLUS_MINOR_VERSION:$LIBGSF_MICRO_VERSION:$LIBGSF_MINOR_VERSION
AC_SUBST(VERSION_INFO)
AC_SUBST(LIBGSF_MAJOR_VERSION)
AC_SUBST(LIBGSF_MINOR_VERSION)
AC_SUBST(LIBGSF_MICRO_VERSION)

dnl Start automake
AM_CONFIG_HEADER(gsf-config.h)
AM_INIT_AUTOMAKE($PACKAGE, $VERSION)
AM_MAINTAINER_MODE

dnl Checks for programs.
AC_PROG_CC
AC_PROG_MAKE_SET
AM_PROG_LIBTOOL

AC_SYS_LARGEFILE
AC_PATH_PROG(PKG_CONFIG, pkg-config, no)

dnl Checks for libraries.
PKG_CHECK_MODULES(LIBGSF,[
gobject-2.0 >= 2.0.0
glib-2.0 >= 2.0.0
libxml-2.0 >= 2.4.16
])

## this should come after `AC_PROG_CC'
ifdef([GNOME_COMPILE_WARNINGS],[GNOME_COMPILE_WARNINGS],)
CFLAGS="$CFLAGS $WARN_CFLAGS -DG_DISABLE_DEPRECATED"
if test "$GCC" = "yes"; then
	for option in -Wno-system-headers -W -Wfloat-equal -Wpointer-arith -Wbad-function-cast -Wwrite-strings -Wsign-compare -Waggregate-return -Wstrict-prototypes -Wmissing-prototypes -Wmissing-declarations -Wmissing-format-attribute -Wnested-externs -Wunreachable-code -Winline; do
		SAVE_CFLAGS="$CFLAGS"
		CFLAGS="$CFLAGS $option"
		AC_MSG_CHECKING([whether gcc understands $option])
		AC_TRY_COMPILE([], [],
			has_option=yes,
			has_option=no,)
		if test $has_option = no; then
		  CFLAGS="$SAVE_CFLAGS"
		fi
		AC_MSG_RESULT($has_option)
		unset has_option
		unset SAVE_CFLAGS
	done
	unset option
fi

AC_MSG_CHECKING([whether -D_POSIX_SOURCE is needed for fdopen])
saved_CFLAGS="$CFLAGS"
CFLAGS="$CFLAGS -Werror"
AC_TRY_COMPILE([#include <stdio.h>], [FILE *f = fdopen(1, "r")], need_posix=no, need_posix=yes)
CFLAGS="$saved_CFLAGS"
AC_MSG_RESULT($need_posix)
if test $need_posix = yes ; then
	CFLAGS="$CFLAGS -D_POSIX_SOURCE"

	# That, unfortunately, turns off struct timeval on Solaris...
	AC_MSG_CHECKING([whether -D__EXTENSIONS__ is needed for struct timeval])
	AC_TRY_COMPILE([#include <sys/time.h>], [struct timeval tv;], need_ext=no, need_ext=yes)
	AC_MSG_RESULT($need_posix)
	if test $need_posix = yes ; then
		CFLAGS="$CFLAGS -D__EXTENSIONS__"
	fi
fi

AC_MSG_CHECKING([whether -D_BSD_SOURCE is needed for caddr_t])
AC_TRY_COMPILE([#include <sys/types.h>], [caddr_t ca], need_bsd1=no, need_bsd1=yes)
AC_MSG_RESULT($need_bsd1)

AC_MSG_CHECKING([whether -D_BSD_SOURCE is needed for lstat])
AC_TRY_LINK([#include <sys/types.h>
	     #include <sys/stat.h>
	     #include <unistd.h>
	    ], [void *ptr = &lstat], need_bsd2=no, need_bsd2=yes)
AC_MSG_RESULT($need_bsd2)
if test $need_bsd1 = yes -o $need_bsd2 = yes; then
	CFLAGS="$CFLAGS -D_BSD_SOURCE"
fi

AC_CHECK_HEADERS(fcntl.h malloc.h unistd.h)
AC_FUNC_MMAP

##################################################
# Checks for gtk-doc and docbook-tools
##################################################

AC_ARG_WITH(html-dir, [  --with-html-dir=PATH    path to installed docs ])

if test "x$with_html_dir" = "x" ; then
  HTML_DIR='${datadir}/doc/libgsf/html'
else
  HTML_DIR=$with_html_dir
fi

AC_SUBST(HTML_DIR)

AC_CHECK_PROG(GTKDOC, gtkdoc-mkdb, true, false)

gtk_doc_min_version=0.9
if $GTKDOC ; then 
    gtk_doc_version=`gtkdoc-mkdb --version`
    AC_MSG_CHECKING([gtk-doc version ($gtk_doc_version) >= $gtk_doc_min_version])

    IFS="${IFS= 	}"; gtk_save_IFS="$IFS"; IFS="."
    set $gtk_doc_version
    for min in $gtk_doc_min_version ; do
        cur=$1; shift
        if test -z $min ; then break; fi
        if test -z $cur ; then GTKDOC=false; break; fi
        if test $cur -gt $min ; then break ; fi
        if test $cur -lt $min ; then GTKDOC=false; break ; fi
    done
    IFS="$gtk_save_IFS"

    if $GTKDOC ; then
      AC_MSG_RESULT(yes)
   else
      AC_MSG_RESULT(no)
   fi
fi

AC_CHECK_PROG(DB2HTML, db2html, true, false)
AM_CONDITIONAL(HAVE_DOCBOOK, $DB2HTML)

dnl Make people enable the gtk-doc stuff explicitely.
AC_ARG_ENABLE(gtk-doc, [  --enable-gtk-doc        use gtk-doc to build documentation [default=no]], enable_gtk_doc="$enableval", enable_gtk_doc=auto)

if test x$enable_gtk_doc = xyes ; then
  if test x$GTKDOC != xtrue ; then
    enable_gtk_doc=no 
  fi
fi

dnl NOTE: We need to use a separate automake conditional for this
dnl       to make this work with the tarballs.
AM_CONDITIONAL(ENABLE_GTK_DOC, test x$enable_gtk_doc = xyes)

dnl ***********************************************************************************
dnl libxml
dnl
AC_CHECK_LIB(z, zlibVersion,
    [Z_LIBS=-lz AC_SUBST(Z_LIBS)],
    AC_MSG_ERROR([*** zlib is required]))

dnl ***********************************************************************************
dnl
dnl Uncomment to enable Python bindings. automake1.5 or later is required.
dnl
dnl AM_PATH_PYTHON
dnl AM_CHECK_PYTHON_HEADERS(,[AC_MSG_ERROR(could not find Python headers)])
dnl dnl check for pygtk
dnl PKG_CHECK_MODULES(PYGTK, pygtk-2.0 >= 1.99.10,
dnl 		  [pygtk_msg="yes"],
dnl 		  [pygtk_msg="NO.  pygtk problem"])
dnl AC_SUBST(PYGTK_CFLAGS)
dnl AC_PATH_PROG(PYGTK_CODEGEN, pygtk-codegen-2.0, no)
dnl if test "x$PYGTK_CODEGEN" = xno; then
dnl   AC_MSG_ERROR(could not find pygtk-codegen-2.0 script)
dnl fi

if test "x$pygtk_msg" = "xyes"; then
  AM_CONDITIONAL(WITH_PYTHON, true)
else
  AM_CONDITIONAL(WITH_PYTHON, false)
fi

have_orbit_python=false
PKG_CHECK_MODULES(ORBIT_PYTHON,
  orbit-python-2.0 >= 1.99.0,
  have_orbit_python=true, have_orbit_python=false)
AC_SUBST(ORBIT_PYTHON_CFLAGS)

dnl ***********************************************************************************

dnl gnome
dnl
test_gnome=true
AC_ARG_WITH(gnome,
	[--{with,without}-gnome   Build additional wrappers for GNOME-VFS and BONOBO],
	if test "x$withval" = xno; then
		test_gnome=false
	fi
)
with_gnome=false
if  test "x$test_gnome" = xtrue ; then 
    PKG_CHECK_MODULES(LIBGSF_GNOME,[
    libbonobo-2.0 >= 2.0.0
    gnome-vfs-2.0 >= 1.9.16
    ],[with_gnome=true])
else
    AC_MSG_WARN([GNOME support disabled, as requested (Use --with-gnome to enable)])
fi
AC_SUBST(LIBGSF_GNOME_CFLAGS)
AC_SUBST(LIBGSF_GNOME_LIBS)
AM_CONDITIONAL(WITH_LIBGSF_GNOME, $with_gnome)

AC_SUBST(LIBGSF_CFLAGS)
AC_SUBST(LIBGSF_LIBS)

AC_OUTPUT([
Makefile
doc/Makefile
gsf/Makefile
gsf-gnome/Makefile
tests/Makefile
python/Makefile
gsf/version.c
libgsf-1.pc
libgsf-1.spec
libgsf-gnome-1.pc
libgsf-gnome-1.spec
])

AC_MSG_RESULT([Configured $PACKAGE $VERSION])

rm -f po/po2tbl.sed
