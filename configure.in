AC_INIT(gsf/gsf.h)

dnl Set release number
dnl This is derived from "Versioning" chapter of info libtool documentation.
PACKAGE=libgsf
dnl     4a) Increment when removing or changing interfaces.
LIBGSF_MAJOR_VERSION=1
dnl     4a) 5) Increment when adding interfaces.
dnl     6) Set to zero when removing or changing interfaces.
LIBGSF_MINOR_VERSION=1
dnl     3) Increment when interfaces not changed at all,
dnl               only bug fixes or internal changes made.
dnl     4b) Set to zero when adding, removing or changing interfaces.
LIBGSF_MICRO_VERSION=0
dnl
dnl     Set this too (I don't know how to do it automatically =) ):
MAJOR_VERSION_PLUS_MINOR_VERSION=2
dnl
VERSION=$LIBGSF_MAJOR_VERSION.$LIBGSF_MINOR_VERSION.$LIBGSF_MICRO_VERSION
dnl Version info for libraries = CURRENT:REVISION:AGE
VERSION_INFO=$MAJOR_VERSION_PLUS_MINOR_VERSION:$LIBGSF_MICRO_VERSION:$LIBGSF_MINOR_VERSION
AC_SUBST(VERSION_INFO)
AC_SUBST(LIBGSF_MAJOR_VERSION)
AC_SUBST(LIBGSF_MINOR_VERSION)
AC_SUBST(LIBGSF_MICRO_VERSION)

dnl Start automake
AM_CONFIG_HEADER(gsf-config.h)
AM_INIT_AUTOMAKE($PACKAGE, $VERSION)
AM_MAINTAINER_MODE

dnl Checks for programs.
AC_PROG_CC
AC_PROG_MAKE_SET
AM_PROG_LIBTOOL

AC_PATH_PROG(PKG_CONFIG, pkg-config, no)

dnl Checks for libraries.
PKG_CHECK_MODULES(LIBGSF,[
gobject-2.0 >= 2.0.0
glib-2.0 >= 2.0.0
])

## this should come after `AC_PROG_CC'
ifdef([GNOME_COMPILE_WARNINGS],[GNOME_COMPILE_WARNINGS],)
CFLAGS="$CFLAGS $WARN_CFLAGS"
if test "$GCC" = "yes"; then
	for option in -Wno-system-headers -W -Wfloat-equal -Wpointer-arith -Wbad-function-cast -Wcast-align -Wwrite-strings -Wconversion -Wsign-compare -Waggregate-return -Wstrict-prototypes -Wmissing-prototypes -Wmissing-declarations -Wmissing-format-attribute -Wnested-externs -Wunreachable-code -Winline; do
		SAVE_CFLAGS="$CFLAGS"
		CFLAGS="$CFLAGS $option"
		AC_MSG_CHECKING([whether gcc understands $option])
		AC_TRY_COMPILE([], [],
			has_option=yes,
			has_option=no,)
		if test $has_option = no; then
		  CFLAGS="$SAVE_CFLAGS"
		fi
		AC_MSG_RESULT($has_option)
		unset has_option
		unset SAVE_CFLAGS
	done
	unset option
fi

AC_MSG_CHECKING([whether -D_BSD_SOURCE is needed for caddr_t])
AC_TRY_COMPILE([#include <sys/types.h>], [caddr_t ca], need_bsd=no, need_bsd=yes)
if test $need_bsd = yes ; then
	CFLAGS="$CFLAGS -D_BSD_SOURCE"
fi
AC_MSG_RESULT($need_bsd)

AC_MSG_CHECKING([whether -D_POSIX_SOURCE is needed for fdopen])
saved_CFLAGS="$CFLAGS"
CFLAGS="$CFLAGS -Werror"
AC_TRY_COMPILE([#include <stdio.h>], [FILE *f = fdopen(1, "r")], need_posix=no, need_posix=yes)
CFLAGS="$saved_CFLAGS"
AC_MSG_RESULT($need_posix)
if test $need_posix = yes ; then
	CFLAGS="$CFLAGS -D_POSIX_SOURCE"

	# That, unfortunately, turns off struct timeval on Solaris...
	AC_MSG_CHECKING([whether -D__EXTENSIONS__ is needed for struct timeval])
	AC_TRY_COMPILE([#include <sys/time.h>], [struct timeval tv;], need_ext=no, need_ext=yes)
	AC_MSG_RESULT($need_posix)
	if test $need_posix = yes ; then
		CFLAGS="$CFLAGS -D__EXTENSIONS__"
	fi
fi

AC_CHECK_HEADERS(fcntl.h malloc.h unistd.h)
AC_FUNC_MMAP

dnl ***********************************************************************************
dnl gtk-doc stuff
dnl borrowed from gdk-pixbuf
AC_CHECK_PROG(GTKDOC, gtkdoc-mkdb, true, false)
dnl Let people disable the gtk-doc stuff.
AC_ARG_ENABLE(gtk-doc,
    [  --enable-gtk-doc        Use gtk-doc to build documentation [default=auto]],
    enable_gtk_doc="$enableval", enable_gtk_doc=auto)

if test x$enable_gtk_doc = xauto ; then
  if test x$GTKDOC = xtrue ; then
    enable_gtk_doc=yes
  else
    enable_gtk_doc=no
  fi
fi

AC_SUBST(HAVE_GTK_DOC)
AM_CONDITIONAL(HAVE_GTK_DOC, $GTKDOC)
AM_CONDITIONAL(ENABLE_GTK_DOC, test x$enable_gtk_doc = xyes)

AC_MSG_CHECKING(whether make is GNU Make)
STRIP_BEGIN=
STRIP_END=
if $ac_make --version 2>/dev/null | grep '^GNU Make ' >/dev/null ; then
	STRIP_BEGIN='$(strip $(STRIP_DUMMY)'
	STRIP_END=')'
	AC_MSG_RESULT(yes)
else
	AC_MSG_RESULT(no)
fi
STRIP_DUMMY=
AC_SUBST(STRIP_DUMMY)
AC_SUBST(STRIP_BEGIN)
AC_SUBST(STRIP_END)

dnl ***********************************************************************************
dnl libxml
dnl
AC_CHECK_LIB(z, zlibVersion,
    [Z_LIBS=-lz AC_SUBST(Z_LIBS)],
    AC_MSG_ERROR([*** zlib is required]))

dnl ***********************************************************************************
dnl libxml
dnl
test_libxml=true
AC_ARG_WITH(libxml,
	[--{with,without}-libxml   Compile with LIBXML support or without it],
	if test x$withval = xno; then
		test_libxml=false
	fi
)
with_libxml=false
if  $test_libxml ; then 
    PKG_CHECK_MODULES(LIBXML,[
    libxml-2.0 >= 2.4.16
    ],[with_libxml=true])
else
    AC_MSG_WARN([libxml support disabled, as requested (Use --with-libxml to enable)])
fi
AM_CONDITIONAL(WITH_LIBXML, $with_libxml)

dnl ***********************************************************************************
dnl gnome-vfs
dnl
test_gnome_vfs=false
AC_ARG_WITH(gnomevfs,
	[--{with,without}-gnomevfs   Compile with GNOME-VFS support or without it],
	if test x$withval = xyes; then
		test_gnome_vfs=true
	fi
)
with_gnome_vfs=false
if  $test_gnome_vfs ; then 
    PKG_CHECK_MODULES(GNOME_VFS,[
    gnome-vfs-2.0 >= 1.9.16
    ],[with_gnome_vfs=true])
else
    AC_MSG_WARN([gnome-vfs support disabled, as requested (Use --with-gnome-vfs to enable)])
fi
AM_CONDITIONAL(WITH_GNOME_VFS, $with_gnome_vfs)

dnl ***********************************************************************************
dnl
dnl Uncomment to enable Python bindings. automake1.5 or later is required.
dnl
dnl AM_PATH_PYTHON
dnl AM_CHECK_PYTHON_HEADERS(,[AC_MSG_ERROR(could not find Python headers)])
dnl dnl check for pygtk
dnl PKG_CHECK_MODULES(PYGTK, pygtk-2.0 >= 1.99.10,
dnl 		  [pygtk_msg="yes"],
dnl 		  [pygtk_msg="NO.  pygtk problem"])
dnl AC_SUBST(PYGTK_CFLAGS)
dnl AC_PATH_PROG(PYGTK_CODEGEN, pygtk-codegen-2.0, no)
dnl if test "x$PYGTK_CODEGEN" = xno; then
dnl   AC_MSG_ERROR(could not find pygtk-codegen-2.0 script)
dnl fi

if test "x$pygtk_msg" = "xyes"; then
  AM_CONDITIONAL(WITH_PYTHON, true)
else
  AM_CONDITIONAL(WITH_PYTHON, false)
fi

dnl ***********************************************************************************

dnl bonobo
dnl
test_bonobo=false
AC_ARG_WITH(bonobo,
	[--{with,without}-bonobo   Compile with BONOBO support or without it],
	if test x$withval = xyes; then
		test_bonobo=true
	fi
)
with_bonobo=false
if  $test_bonobo ; then 
    PKG_CHECK_MODULES(BONOBO,[
    libbonobo-2.0 >= 2.0.0
    ],[with_bonobo=true])
else
    AC_MSG_WARN([bonobo support disabled, as requested (Use --with-bonobo to enable)])
fi
AC_SUBST(BONOBO_CFLAGS)
AC_SUBST(BONOBO_LIBS)
AM_CONDITIONAL(WITH_BONOBO, $with_bonobo)

dnl ***********************************************************************************

LIBGSF_CFLAGS="$LIBGSF_CFLAGS $LIBXML_CFLAGS $GNOME_VFS_CFLAGS $BONOBO_CFLAGS"
LIBGSF_LIBS="$LIBGSF_LIBS $LIBXML_LIBS $GNOME_VFS_LIBS $BONOBO_LIBS"
AC_SUBST(LIBGSF_CFLAGS)
AC_SUBST(LIBGSF_LIBS)

AC_OUTPUT([
Makefile
doc/Makefile
gsf/Makefile
tests/Makefile
python/Makefile
gsf/version.c
libgsf-1.pc
libgsf-1.spec
])

AC_MSG_RESULT([Configured $PACKAGE $VERSION])

rm -f po/po2tbl.sed
