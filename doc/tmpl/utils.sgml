<!-- ##### SECTION Title ##### -->
utils

<!-- ##### SECTION Short_Description ##### -->


<!-- ##### SECTION Long_Description ##### -->
<para>

</para>

<!-- ##### SECTION See_Also ##### -->
<para>

</para>

<!-- ##### SECTION Stability_Level ##### -->


<!-- ##### FUNCTION gsf_init ##### -->
<para>

</para>



<!-- ##### FUNCTION gsf_shutdown ##### -->
<para>

</para>



<!-- ##### FUNCTION gsf_init_dynamic ##### -->
<para>

</para>

@module: 


<!-- ##### FUNCTION gsf_shutdown_dynamic ##### -->
<para>

</para>

@module: 


<!-- ##### VARIABLE libgsf_major_version ##### -->
<para>
The major version number of the GSF library. 
(e.g. in GSF version 1.2.5 this is 1.)
</para>

<para>
This variable is in the library and thus represents the
GSF library you have linked against (which may be different from the version
of the GSF library from which you have included the headers).
</para>


<!-- ##### VARIABLE libgsf_minor_version ##### -->
<para>
The minor version number of the GLib library.
(e.g. in GLib version 1.2.5 this is 2.)
</para>

<para>
This variable is in the library and thus represents the
GSF library you have linked against (which may be different from the version
of the GSF library from which you have included the headers).
</para>


<!-- ##### VARIABLE libgsf_micro_version ##### -->
<para>
The micro version number of the GSF library.
(e.g. in GSF version 1.2.5 this is 5.)
</para>

<para>
This variable is in the library and thus represents the
GSF library you have linked against (which may be different from the version
of the GSF library from which you have included the headers).
</para>


<!-- ##### MACRO GSF_CLASS ##### -->
<para>

</para>

@name: 
@prefix: 
@class_init: 
@instance_init: 
@parent: 


<!-- ##### MACRO GSF_CLASS_FULL ##### -->
<para>

</para>

@name: 
@prefix: 
@base_init: 
@base_finalize: 
@class_init:
@class_finalize: 
@instance_init: 
@parent_type: 
@abstract: 
@interface_decl: 
<!-- # Unused Parameters # -->
@class_init: 


<!-- ##### MACRO GSF_CLASS_ABSTRACT ##### -->
<para>

</para>

@name: 
@prefix: 
@class_init: 
@instance_init: 
@parent: 


<!-- ##### MACRO GSF_INTERFACE ##### -->
<para>

</para>

@init_func: 
@iface_type: 


<!-- ##### MACRO GSF_INTERFACE_FULL ##### -->
<para>

</para>

@type: 
@init_func: 
@iface_type: 


<!-- ##### MACRO GSF_DYNAMIC_CLASS ##### -->
<para>

</para>

@name: 
@prefix: 
@class_init: 
@instance_init: 
@parent: 
<!-- # Unused Parameters # -->
@plugin: 
@type: 


<!-- ##### MACRO GSF_DYNAMIC_CLASS_FULL ##### -->
<para>

</para>

@name: 
@prefix: 
@base_init: 
@base_finalize: 
@class_init:
@class_finalize: 
@instance_init: 
@parent_type: 
@abstract:
@interface_decl: 
<!-- # Unused Parameters # -->
@class_init: 
@module: 
@plugin: 
@type: 


<!-- ##### MACRO GSF_DYNAMIC_CLASS_ABSTRACT ##### -->
<para>

</para>

@name: 
@prefix: 
@class_init: 
@instance_init: 
@parent: 
<!-- # Unused Parameters # -->
@module: 
@plugin: 
@type: 


<!-- ##### MACRO GSF_DYNAMIC_INTERFACE ##### -->
<para>

</para>

@init_func: 
@iface_type: 
@module: 


<!-- ##### MACRO GSF_DYNAMIC_INTERFACE_FULL ##### -->
<para>

</para>

@type: 
@init_func: 
@iface_type: 
@module: 


<!-- ##### MACRO GSF_PARAM_STATIC ##### -->
<para>

</para>



<!-- ##### MACRO GSF_ERROR ##### -->
<para>
  This convenience macro simply calls gsf_error_quark().  You can use
  it in calls to g_error_matches(), for example.  The macro returns
  the #GQuark that is used to identify errors from libgsf functions.
  Specific error codes come from the #GsfError enumeration.
</para>



<!-- ##### ENUM GsfError ##### -->
<para>
   Error codes that can be returned from libgsf functions in #GError structures.
</para>

@GSF_ERROR_OUT_OF_MEMORY: Not enough memory could be allocated to hold
a structure or object.
@GSF_ERROR_INVALID_DATA: A file being read contained invalid or
inconsistent data.

<!-- ##### FUNCTION gsf_error_quark ##### -->
<para>

</para>

@Returns: 


<!-- ##### FUNCTION gsf_mem_dump ##### -->
<para>

</para>

@ptr: 
@len: 


<!-- ##### FUNCTION gsf_input_dump ##### -->
<para>

</para>

@input: 
@dump_as_hex: 


<!-- ##### MACRO GSF_OFF_T_FORMAT ##### -->
<para>

</para>



<!-- ##### TYPEDEF gsf_off_t ##### -->
<para>

</para>


<!-- ##### FUNCTION gsf_filename_to_utf8 ##### -->
<para>

</para>

@filename: 
@quoted: 
@Returns: 


<!-- ##### FUNCTION gsf_iconv_close ##### -->
<para>

</para>

@handle: 


<!-- ##### FUNCTION gsf_extension_pointer ##### -->
<para>

</para>

@path: 
@Returns: 


<!-- ##### FUNCTION gsf_base64_encode_simple ##### -->
<para>

</para>

@data: 
@len: 
@Returns: 


<!-- ##### FUNCTION gsf_base64_encode_close ##### -->
<para>

</para>

@in: 
@inlen: 
@break_lines: 
@out: 
@state: 
@save: 
@Returns: 


<!-- ##### FUNCTION gsf_base64_encode_step ##### -->
<para>

</para>

@in: 
@len: 
@break_lines: 
@out: 
@state: 
@save: 
@Returns: 


<!-- ##### FUNCTION gsf_base64_decode_simple ##### -->
<para>

</para>

@data: 
@len: 
@Returns: 


<!-- ##### FUNCTION gsf_base64_decode_step ##### -->
<para>

</para>

@in: 
@len: 
@out: 
@state: 
@save: 
@Returns: 


<!-- ##### MACRO GSF_LE_GET_GINT8 ##### -->
<para>
Interpret data as an 8 bit integer value in little endian order.
</para>

@p: Pointer to storage


<!-- ##### MACRO GSF_LE_GET_GUINT64 ##### -->
<para>
Interpret data as a 64 bit unsigned integer value in little endian order.
</para>

@p: Pointer to storage


<!-- ##### MACRO GSF_LE_GET_GINT16 ##### -->
<para>
Interpret data as a 16 bit integer value in little endian order.
</para>

@p: Pointer to storage


<!-- ##### MACRO GSF_LE_GET_GUINT8 ##### -->
<para>
Interpret data as an 8 bit unsigned integer value in little endian order.
</para>

@p: Pointer to storage


<!-- ##### MACRO GSF_LE_GET_GINT32 ##### -->
<para>
Interpret data as a 32 bit integer value in little endian order.
</para>

@p: Pointer to storage


<!-- ##### MACRO GSF_LE_GET_GUINT16 ##### -->
<para>
Interpret data as a 16 bit unsigned integer value in little endian order.
</para>

@p: Pointer to storage


<!-- ##### MACRO GSF_LE_GET_GUINT32 ##### -->
<para>
Interpret data as a 32 bit unsigned integer value in little endian order.
</para>

@p: Pointer to storage


<!-- ##### MACRO GSF_LE_GET_GINT64 ##### -->
<para>
Interpret data as a 64 bit integer value in little endian order.
</para>

@p: Pointer to storage


<!-- ##### FUNCTION gsf_le_get_guint64 ##### -->
<para>

</para>

@p: 
@Returns: 


<!-- ##### MACRO GSF_LE_GET_FLOAT ##### -->
<para>
Interpret data as a float value in little endian order.
</para>

@p: Pointer to storage


<!-- ##### FUNCTION gsf_le_get_float ##### -->
<para>

</para>

@p: 
@Returns: 


<!-- ##### MACRO GSF_LE_GET_DOUBLE ##### -->
<para>
Interpret data as a double value in little endian order.
</para>

@p: Pointer to storage


<!-- ##### FUNCTION gsf_le_get_double ##### -->
<para>

</para>

@p: 
@Returns: 


<!-- ##### MACRO GSF_LE_SET_GUINT8 ##### -->
<para>
Store an 8 bit unsigned integer value in memory in little endian order.
</para>

@p: Pointer to storage
@dat: Value to be stored


<!-- ##### MACRO GSF_LE_SET_GUINT16 ##### -->
<para>
Store a 16 bit unsigned integer value in memory in little endian order.
</para>

@p: Pointer to storage
@dat: Value to be stored


<!-- ##### MACRO GSF_LE_SET_GUINT32 ##### -->
<para>
Store a 32 bit unsigned integer value in memory in little endian order.
</para>

@p: Pointer to storage
@dat: Value to be stored


<!-- ##### MACRO GSF_LE_SET_GINT8 ##### -->
<para>
Store an 8 bit integer value in memory in little endian order.
</para>

@p: Pointer to storage
@dat: Value to be stored


<!-- ##### MACRO GSF_LE_SET_GINT16 ##### -->
<para>
Store a 16 bit integer value in memory in little endian order.
</para>

@p: Pointer to storage
@dat: Value to be stored


<!-- ##### MACRO GSF_LE_SET_GINT32 ##### -->
<para>
Store a 32 bit integer value in memory in little endian order.
</para>

@p: Pointer to storage
@dat: Value to be stored


<!-- ##### MACRO GSF_LE_SET_GINT64 ##### -->
<para>
Store a 64 bit integer value in memory in little endian order.
</para>

@p: Pointer to storage
@dat: Value to be stored


<!-- ##### MACRO GSF_LE_SET_GUINT64 ##### -->
<para>
Store a 64 bit unsigned integer value in memory in little endian order.
</para>

@p: Pointer to storage
@dat: Value to be stored


<!-- ##### MACRO GSF_LE_SET_FLOAT ##### -->
<para>
Store a float value in memory in little endian order.
</para>

@p: Pointer to storage
@dat: Value to be stored


<!-- ##### MACRO GSF_LE_SET_DOUBLE ##### -->
<para>
Store a double value in memory in little endian order.
</para>

@p: Pointer to storage
@dat: Value to be stored


<!-- ##### FUNCTION gsf_le_set_float ##### -->
<para>

</para>

@p: 
@f: 


<!-- ##### FUNCTION gsf_le_set_double ##### -->
<para>

</para>

@p: 
@d: 


<!-- ##### STRUCT GsfTimestamp ##### -->
<para>

</para>

@date: 
@seconds: 
@time_zone: 
@timet: 

<!-- ##### FUNCTION gsf_timestamp_new ##### -->
<para>

</para>

@date: 
@seconds: 
@tz: 
@Returns: 


<!-- ##### FUNCTION gsf_timestamp_new_now ##### -->
<para>

</para>

@Returns: 


<!-- ##### FUNCTION gsf_timestamp_copy ##### -->
<para>

</para>

@stamp: 
@Returns: 


<!-- ##### FUNCTION gsf_timestamp_free ##### -->
<para>

</para>

@stamp: 


<!-- ##### FUNCTION gsf_timestamp_as_string ##### -->
<para>

</para>

@stamp: 
@Returns: 


<!-- ##### FUNCTION gsf_timestamp_parse ##### -->
<para>

</para>

@spec: 
@stamp: 
@Returns: 


<!-- ##### FUNCTION gsf_timestamp_hash ##### -->
<para>

</para>

@stamp: 
@Returns: 


<!-- ##### FUNCTION gsf_timestamp_equal ##### -->
<para>

</para>

@a: 
@b: 
@Returns: 


<!-- ##### FUNCTION gsf_value_set_timestamp ##### -->
<para>

</para>

@value: 
@stamp: 


<!-- ##### MACRO VAL_IS_GSF_TIMESTAMP ##### -->
<para>

</para>

@v: 


<!-- ##### FUNCTION gsf_doc_prop_swap_val ##### -->
<para>

</para>

@prop: 
@val: 
@Returns: 


<!-- ##### FUNCTION gsf_property_settings_collect ##### -->
<para>

</para>

@object_type: 
@p_params: 
@p_n_params: 
@first_property_name: 
@Varargs: 


<!-- ##### FUNCTION gsf_property_settings_collect_valist ##### -->
<para>

</para>

@object_type: 
@p_params: 
@p_n_params: 
@first_property_name: 
@var_args: 


<!-- ##### FUNCTION gsf_property_settings_free ##### -->
<para>

</para>

@params: 
@n_params: 



<!--
Local variables:
mode: sgml
sgml-parent-document: ("../gsf-docs.sgml" "book" "refsect1")
End:
-->


